# -*- coding: utf-8 -*-
"""DMK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AWFgNZ4rTotD1rm08foOwHG2O2sqQ907

Customer Churn Analysis & Prediction📊

#Data Exploration

##*import necessery Libraries*
"""

# Importing libraries
import warnings
warnings.filterwarnings('ignore')

# Data manipulation
import pandas as pd
import numpy as np

# Visualization
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno

# Model selection and preprocessing
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder , OrdinalEncoder
from imblearn.combine import SMOTEENN
from imblearn.over_sampling import SMOTE

# Machine learning models
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier, plot_importance

# Model evaluation
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, recall_score

"""### ***Read CSV File***"""

data = pd.read_csv(r"/content/credit_card_churn.csv" , usecols=lambda column: column not in ['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'
                                                                                   , 'Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'])
data.head()

""">### ***Shape of data***"""

data.shape
print(f'The number of rows (Observations) : {data.shape[0]}')
print(f'The number of columns (Features) : {data.shape[1]}')

"""### ***Columns***"""

columns = pd.DataFrame(data.columns , columns=['Column Name'])
columns

"""### ***Data Information***"""

data.info()

"""### ***Chek nulls & drop it***"""

pd.DataFrame({'Number of Missing Values':data.isnull().sum(),'Percentage Of Missing Values (%)':(data.isnull().sum() / data.shape[0]) * 100})

"""### ***Chek duplicated values***"""

data[data.duplicated()]

"""### ***descriptive statistics***

>> numerical columns
"""

data.describe(include='number').T.style.highlight_max(subset=['mean'	,'std'	,'min'	,'25%'	,'50%'	,'75%'	,'max'],color='green')

""">>Categrical columns"""

data.describe(exclude='number').T

"""

'***CLIENTNUM***' is unique for every customer

"""

data.drop(columns=['CLIENTNUM'],inplace=True)

"""### ***Select categorical and numerical columns***"""

cat_columns = list(data.select_dtypes(exclude=['number']).columns)
numerical_columns = list(data.select_dtypes(include='number'))
print(f"Categrical columns >> {cat_columns} <<")
print(f"Numerical columns >> {numerical_columns} <<")
data[cat_columns] = data[cat_columns].astype('category')

"""## ***Independent Feature Analysis & Linking Features to Target Variable***"""

# The number of Categries in Each Columns
for n,i in enumerate(cat_columns , start=1) :
    print(f'{n}-The number of Categories in "{i}" is {data[i].nunique()} and The Categries is > {data[i].unique()}\n ')

"""## Define Value counts function"""

def value_counts(data, column):
    value_counts = data[column].value_counts(normalize=True, dropna=False) * 100
    formatted_data = pd.DataFrame({
        'Count': data[column].value_counts(dropna=False),
        'Percentage (%)': value_counts.round(2)
    }).reset_index()

    formatted_data.columns = [column.capitalize(), 'Count', 'Percentage (%)']

    return formatted_data.style.highlight_max(subset=['Count', 'Percentage (%)'])

for col in cat_columns:
    print(f'The {col} Value counts')
    display(value_counts(data , col))
    print(f'The {col} Value counts by Target(Attrition_Flag)')

"""## ***Feature Engineering***

## Convert 'Total_Ct_Chng_Q4_Q1' into a categorical feature

This code transforms or splits the dictionary column into many columns.

E.g. The output DataFrame of this cell will have columns named [`date, letter, fruit, weather`].
"""

import pandas as pd
df = pd.DataFrame({
  'date': ['2022-09-14', '2022-09-15', '2022-09-16'],
  'letter': ['A', 'B', 'C'],
  'dict' : [{ 'fruit': 'apple', 'weather': 'aces'},
            { 'fruit': 'banana', 'weather': 'bad'},
            { 'fruit': 'cantaloupe', 'weather': 'cloudy'}],
})

pd.concat([df.drop(['dict'], axis=1), df['dict'].apply(pd.Series)], axis=1)

# Define the bins and labels for categorization
bins = [-float('inf'), 0.99, 1.01, float('inf')]
labels = ['Decreased', 'Stable', 'Increased']

# Apply pd.cut to categorize the changes
data['Transaction_Change_Category'] = pd.cut(data['Total_Ct_Chng_Q4_Q1'], bins=bins, labels=labels)
data[['Total_Ct_Chng_Q4_Q1','Transaction_Change_Category']]

"""# ***Data Visualization***

> ## ***Data distribution***

>> ### ***distribution of numerical features***
"""

fig, axes = plt.subplots(14, 1, figsize=(7, 25))
for i, col in enumerate(numerical_columns):
    sns.histplot(data=data, x=col, ax=axes[i], kde=True, hue='Attrition_Flag', palette=['red', 'skyblue'])
    axes[i].set_title(f'Histogram of {col}')

fig.suptitle('Distribution of Numerical Columns with Churn Information', fontsize=16)
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

"""## ***Boxplot***"""

fig, axes = plt.subplots(14, 1, figsize=(12, 50))
for i, col in enumerate(numerical_columns):
    sns.boxplot(data=data, y=col, ax=axes[i],x='Attrition_Flag',palette='viridis')
    axes[i].set_title(f'boxplot of {col}')
fig.suptitle('Distribution of Numerical Columns with Churn Information', fontsize=16)
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

"""> ## ***distribution of Categorical data***"""

ig, axes = plt.subplots(1, 3, figsize=(20, 12), facecolor="lightgray")

for i, column in enumerate(cat_columns[:3]):
    ax = axes[i]
    d = data[column].value_counts()
    ax.pie(d, labels=d.values,autopct="%1.1f%%",shadow=True)
    ax.set_title(column,size=18)
    ax.legend(d.index)

ig, axes = plt.subplots(1, 3, figsize=(20, 12), facecolor="lightgray")

for i, column in enumerate(cat_columns[3:]):
    ax = axes[i]
    d = data[column].value_counts()
    ax.pie(d, labels=d.values,autopct="%1.1f%%",shadow=True)
    ax.set_title(column,size=18)
    ax.legend(d.index)

sns.countplot(data , x = 'Transaction_Change_Category',palette='viridis' )

fig, axes = plt.subplots(14, 1, figsize=(8, 44))

for i, col in enumerate(numerical_columns):
    sns.barplot(data=data, x='Attrition_Flag', y=col, ax=axes[i], palette='GnBu')
    axes[i].set_title(f'Mean of {col} by Churn', fontsize=12)

fig.suptitle('Comparison of Numerical Features by Churn Status', fontsize=16 , y =1)

plt.tight_layout()
plt.show()

plt.figure(figsize=(20, 15))
sns.heatmap(data.select_dtypes(include='number').corr(), annot=True)
plt.title("Correlation Heatmap of Numerical Features")
plt.show()

data.drop('Transaction_Change_Category',axis=1,inplace=True)

"""# **Customer Attrition Prediction Model**

"""

data = data[(data['Income_Category'] != 'Unknown') & (data['Education_Level'] != 'Unknown') & (data['Marital_Status'] != 'Unknown')].copy()

mapping = {'Attrited Customer': 1,
           'Existing Customer': 0}
data['Attrition_Flag'] = data['Attrition_Flag'].replace(mapping)

X = data.drop("Attrition_Flag", axis=1)
y = data["Attrition_Flag"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## ***Encoding***"""

# Apply one hot encoding using pandas get_dummies
X_train = pd.get_dummies(X_train, columns=['Gender'], drop_first=False)
X_test = pd.get_dummies(X_test, columns=['Gender'], drop_first=False)

# Define OrdinalEncoder for income with specified order
income_categories = ['Less than $40K', '$40K - $60K', '$60K - $80K', '$80K - $120K', '$120K +']
income_encoder = OrdinalEncoder(categories=[income_categories],
                                handle_unknown='use_encoded_value', unknown_value=-1)
X_train['Income_Category'] = income_encoder.fit_transform(X_train[['Income_Category']])
X_test['Income_Category']  = income_encoder.transform(X_test[['Income_Category']])

# Define OrdinalEncoder for card category with specified order
card_encoder = OrdinalEncoder(categories=[['Blue','Silver','Gold','Platinum']],
                              handle_unknown='use_encoded_value', unknown_value=-1)
#Apply encoding
# Gender Encoding
X_train['Card_Category'] = card_encoder.fit_transform(X_train[['Card_Category']])
X_test['Card_Category']  = card_encoder.transform(X_test[['Card_Category']])

# Education Level One-Hot Encoding
education_train = pd.get_dummies(X_train['Education_Level'], prefix='Education')
education_test = pd.get_dummies(X_test['Education_Level'], prefix='Education')

# Marital Status One-Hot Encoding
marital_train = pd.get_dummies(X_train['Marital_Status'], prefix='Marital')
marital_test = pd.get_dummies(X_test['Marital_Status'], prefix='Marital')

# Merge encoded columns and remove original columns
X_train = pd.concat([X_train, education_train, marital_train], axis=1)
X_test = pd.concat([X_test, education_test, marital_test], axis=1)
# Drop original columns that were converted to one-hot encoding
X_train = X_train.drop(['Education_Level', 'Marital_Status'], axis=1)
X_test = X_test.drop(['Education_Level', 'Marital_Status'], axis=1)
# Align columns order
X_test = X_test[X_train.columns]

"""# ***Scaling***"""

scaler = StandardScaler()

# Scale numerical features
X_train[numerical_columns] = scaler.fit_transform(X_train[numerical_columns])
X_test[numerical_columns] = scaler.transform(X_test[numerical_columns])

"""## ***Check data imbalance***

"""

sns.countplot(data=data ,x='Attrition_Flag' )

"""## ***Handling Class Imbalance using SMOTE***"""

# Apply SMOTE to handle class imbalance
smote = SMOTE(random_state=42)
X_train, y_train = smote.fit_resample(X_train, y_train)

print(pd.Series(y_train).value_counts())

"""# ***Build Model***"""



""">>***Random Forest***"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Random Forest مع موازنة بين الدقة و الـ Recall للفئة النادرة
random_forest_model = RandomForestClassifier(
    random_state=42,
    class_weight={0:1, 1:5},  # وزن أكبر للفئة النادرة
    n_estimators=300,         # أشجار أكثر لاستقرار النتائج
    max_depth=12,             # عمق متوسط للتحكم في التعقيد
    min_samples_split=5,      # عدد عينات أكبر قبل الانقسام
    min_samples_leaf=2,       # عينات أكبر لكل ورقة
    max_features='sqrt',      # ميزات عشوائية لكل انقسام
    bootstrap=True            # استخدام عينات مختلفة لكل شجرة
)

# تدريب النموذج
random_forest_model.fit(X_train, y_train)

# التنبؤ
y_pred_train_rf = random_forest_model.predict(X_train)
y_pred_test_rf = random_forest_model.predict(X_test)

# حساب الدقة
accuracy_train_rf = accuracy_score(y_train, y_pred_train_rf)
accuracy_test_rf = accuracy_score(y_test, y_pred_test_rf)

# عرض النتائج
print(f"Random Forest Train Accuracy: {accuracy_train_rf:.3f}")
print(f"Random Forest Test Accuracy: {accuracy_test_rf:.3f}")
print("\nRandom Forest Classification Report (Test Data):")
print(classification_report(y_test, y_pred_test_rf))

from sklearn.model_selection import cross_val_score
import numpy as np

# Evaluate recall for minority class (class 1) using Random Forest
scores = cross_val_score(
    random_forest_model,  # هنا تحط اسم الموديل الصحيح
    X_train,
    y_train,
    cv=5,
    scoring='recall_macro'  # أو 'recall' لو عايز لكل الفئات سوا
)

print("Average Recall (macro) across folds:", np.mean(scores))

""">>***Logistic Regression***"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Train Logistic Regression model
logistic_regression_model = LogisticRegression()
logistic_regression_model.fit(X_train, y_train)

# Predictions on train and test sets
y_pred_train_lr = logistic_regression_model.predict(X_train)
y_pred_test_lr = logistic_regression_model.predict(X_test)

# Accuracy scores
accuracy_train_lr = accuracy_score(y_train, y_pred_train_lr)
accuracy_test_lr = accuracy_score(y_test, y_pred_test_lr)

# Print results
print(f"Logistic Regression Train Accuracy: {accuracy_train_lr:.3f}")
print(f"Logistic Regression Test Accuracy: {accuracy_test_lr:.3f}")
print("\nLogistic Regression Classification Report (Test Data):")
print(classification_report(y_test, y_pred_test_lr))

""">>***KNN***"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

# Train KNN model
knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)

# Predictions on train and test sets
y_pred_train_knn = knn_model.predict(X_train)
y_pred_test_knn = knn_model.predict(X_test)

# Accuracy scores
accuracy_train_knn = accuracy_score(y_train, y_pred_train_knn)
accuracy_test_knn = accuracy_score(y_test, y_pred_test_knn)

# Print results
print(f"KNN Train Accuracy: {accuracy_train_knn:.3f}")
print(f"KNN Test Accuracy: {accuracy_test_knn:.3f}")
print("\nKNN Classification Report (Test Data):")
print(classification_report(y_test, y_pred_test_knn))

""">>***DecisionTreeClassifier***"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# Regularized Decision Tree
decision_tree_model = DecisionTreeClassifier(
    random_state=42,
    max_depth=10,            # limit depth
    min_samples_split=10,     # require more samples to split
    min_samples_leaf=2,      # require more samples at leaves
    max_features='sqrt'      # use a subset of features
)
decision_tree_model.fit(X_train, y_train)

# Predictions
y_pred_train_dt = decision_tree_model.predict(X_train)
y_pred_test_dt = decision_tree_model.predict(X_test)

# Accuracy
accuracy_train_dt = accuracy_score(y_train, y_pred_train_dt)
accuracy_test_dt = accuracy_score(y_test, y_pred_test_dt)

print(f"Decision Tree Train Accuracy: {accuracy_train_dt:.3f}")
print(f"Decision Tree Test Accuracy: {accuracy_test_dt:.3f}")
print("\nDecision Tree Classification Report (Test Data):")
print(classification_report(y_test, y_pred_test_dt))

best_tree = DecisionTreeClassifier(
    random_state=42,
    max_depth=5,
    min_samples_split=5,
    min_samples_leaf=2
)
best_tree.fit(X_train, y_train)

y_pred_train_dt = best_tree.predict(X_train)
y_pred_test_dt = best_tree.predict(X_test)

accuracy_train_dt = accuracy_score(y_train, y_pred_train_dt)
accuracy_test_dt = accuracy_score(y_test, y_pred_test_dt)

print(f"Decision Tree Train Accuracy: {accuracy_train_dt:.3f}")
print(f"Decision Tree Test Accuracy: {accuracy_test_dt:.3f}")
print("\nDecision Tree Classification Report (Test Data):")
print(classification_report(y_test, y_pred_test_dt))

from sklearn.metrics import accuracy_score, recall_score, classification_report

# التوقع على بيانات التدريب
y_train_pred = best_tree.predict(X_train)

# التوقع على بيانات الاختبار
y_test_pred = best_tree.predict(X_test)

# حساب المقاييس على التدريب
train_acc = accuracy_score(y_train, y_train_pred)
train_recall_macro = recall_score(y_train, y_train_pred, average='macro')

# حساب المقاييس على الاختبار
test_acc = accuracy_score(y_test, y_test_pred)
test_recall_macro = recall_score(y_test, y_test_pred, average='macro')

print("=== Training Performance ===")
print(f"Accuracy: {train_acc:.4f}")
print(f"Recall (macro): {train_recall_macro:.4f}")
print("\n=== Testing Performance ===")
print(f"Accuracy: {test_acc:.4f}")
print(f"Recall (macro): {test_recall_macro:.4f}")

print("\n=== Classification Report (Test Set) ===")
print(classification_report(y_test, y_test_pred))

""">>***Support vector machine***"""

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Train SVC model
svc_model = SVC()
svc_model.fit(X_train, y_train)

# Predictions on train and test sets
y_pred_train_svc = svc_model.predict(X_train)
y_pred_test_svc = svc_model.predict(X_test)

# Accuracy scores
accuracy_train_svc = accuracy_score(y_train, y_pred_train_svc)
accuracy_test_svc = accuracy_score(y_test, y_pred_test_svc)

# Print results
print(f"SVC Train Accuracy: {accuracy_train_svc:.3f}")
print(f"SVC Test Accuracy: {accuracy_test_svc:.3f}")
print("\nSVC Classification Report (Test Data):")
print(classification_report(y_test, y_pred_test_svc))

print(X_train.shape, y_train.shape)

"""# ***Optimization***

### Define param grids for GridSearchCV
"""

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix
models_params = {
    "Random Forest": (
        RandomForestClassifier(),
        {
            'n_estimators': [50, 100, 200],
            'max_depth': [None, 10, 20],
            'min_samples_split': [2, 5]
        }
    ),
    "Logistic Regression": (
        LogisticRegression(max_iter=1000),
        {
            'C': [0.01, 0.1, 1, 10],
            'solver': ['liblinear', 'lbfgs']
        }
    ),
    "SVM": (
        SVC(),
        {
            'C': [0.1, 1, 10],
            'kernel': ['linear', 'rbf']
        }
    ),
    "KNN": (
        KNeighborsClassifier(),
        {
            'n_neighbors': [3, 5, 7, 9],
            'weights': ['uniform', 'distance'],
            'metric': ['euclidean', 'manhattan']
        }
    ),
    "Decision Tree": (
        DecisionTreeClassifier(),
        {
            'max_depth': [None, 5, 10, 20],
            'min_samples_split': [2, 5, 10],
            'criterion': ['gini', 'entropy']
        }
    )
}


for model_name, (model, param_grid) in models_params.items():
    print(f"\n Running GridSearchCV for {model_name}...")

    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='accuracy', n_jobs=-1)
    grid_search.fit(X_train, y_train)

    best_model = grid_search.best_estimator_
    print(f" Best parameters for {model_name}: {grid_search.best_params_}")

    accuracy = best_model.score(X_test, y_test)
    print(f" Accuracy on test set: {accuracy:.4f}")

    y_pred = best_model.predict(X_test)

    print("\n Classification Report:")
    print(classification_report(y_test, y_pred))

    print(" Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))

print(X_train.columns.tolist())